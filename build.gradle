buildscript {

    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/plugins-release'
        }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }

}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

apply plugin: 'java'

allprojects {
    apply plugin: 'base'
    apply plugin: 'jacoco'
    repositories {
        mavenCentral()
        maven {
            url 'http://repo.spring.io/plugins-release'
        }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }
    jacoco {
        toolVersion = '0.7.1.201405082137'
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'com.github.vineey'
    version = '1.0.0-SNAPSHOT'
    description = 'This project provides rsql api for querydsl framework by integrating it with rsql-parser'

    repositories {
        mavenCentral()
    }

    sourceSets {
        generated {
            java {
                srcDirs = ['src/main/generated']
            }
        }

        main {
            java {
                srcDirs = ['src/main/java','src/main/generated']
            }
        }
    }

    clean {
        delete sourceSets.generated.java.srcDirs
    }

    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.5'
        provided 'org.slf4j:jcl-over-slf4j:1.7.5'
        provided 'ch.qos.logback:logback-core:1.0.13'
        provided 'ch.qos.logback:logback-classic:1.0.13'
        testCompile 'junit:junit:4.12'
    }

    jacocoTestReport {

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: ['**/ast/**', '**/test/**'])
            })
        }
    }

}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

def deployableSubproject =
        ['rsql-api-filter',
         'rsql-api-page',
         'rsql-api-sort',
         'rsql-api-select',
         'rsql-api-all',
         'rsql-querydsl-filter',
         'rsql-querydsl-page',
         'rsql-querydsl-sort',
         'rsql-querydsl-all',
         'rsql-querydsl-spring']


if (project.hasProperty('release')) {
    subprojects
            {

                task printName {
                    println('deployed project : ' + project.name + " isDeployable=" + deployableSubproject.contains(project.name))
                }

                if (deployableSubproject.contains(project.name)) {

                    task javadocJar(type: Jar) {
                        classifier = 'javadoc'
                        from javadoc
                    }

                    task sourcesJar(type: Jar) {
                        classifier = 'sources'
                        from sourceSets.main.allSource
                    }

                    artifacts {
                        archives javadocJar, sourcesJar
                    }
                }
            }

    subprojects {
        apply plugin: 'signing'
        apply plugin: 'maven'
        if (deployableSubproject.contains(project.name)) {
            // Signature of artifacts
            signing {
                sign configurations.archives
            }

            uploadArchives {
                repositories {
                    mavenDeployer {
                        // POM signature
                        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                        // Target repository
                        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                            authentication(userName: ossrhUsername, password: ossrhPassword)
                        }

                        pom.project {
                            version '1.0.0.M2'
                            name project.name
                            description project.description
                            packaging 'jar'
                            url 'https://github.com/vineey/archelix-rsql'

                            scm {
                                connection 'scm:git:https://github.com/vineey/archelix-rsql.git'
                                developerConnection 'scm:git:git@https://github.com/vineey/archelix-rsql.git'
                                url 'https://github.com/vineey/archelix-rsql.git'
                            }

                            licenses {
                                license {
                                    name 'The MIT License (MIT)'
                                    url 'http://opensource.org/licenses/MIT'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id = 'vineey'
                                    name = 'John Michael Vincent S. Rustia'
                                    email = 'vinetech416@gmail.com'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
